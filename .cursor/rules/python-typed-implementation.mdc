---
description: Python MCP 実装（非OpenAPIジェネレータ・型安全方針）
globs: python/**/*.py,python/**/*.pyi
---
# gBizINFO MCP（Python）型安全実装ガイド（OpenAPIジェネレータ不使用）

このルールは、OpenAPI クライアント生成を使わずに、型安全（静的・動的の両面）で gBizINFO MCP を Python で実装するための指針を定義します。既存のプロジェクト構成・セキュリティ規約に整合します。

- 参考: 共通規約（JS 版）のヘッダ名は `X-hojinInfo-api-token` を厳密使用
- 実装言語: Python 3.10+
- フレームワーク: FastAPI（fastapi-mcp）
- HTTP: requests（集中管理）
- モデル: Pydantic v2 系を推奨（ドメインモデル/DTO）

## ディレクトリ構成（推奨）

- `python/src/gbizinfo_mcp/`（名前空間）
  - `config.py`（環境変数/設定の読み込み・検証）
  - `mcp_server.py`（エントリポイント: FastAPI + fastapi-mcp）
  - `services/`
    - `http.py`（HTTP 基盤: タイムアウト/リトライ/レート制御/ヘッダ自動付与）
    - `gbizinfo_service.py`（ユースケース/外部 API 呼び出し）
    - `adapters/gbizinfo_adapter.py`（外部レスポンス→ドメイン変換）
  - `model/`（ドメインモデル: Pydantic BaseModel）
    - `company.py`, `pagination.py`, `...`（必要に応じて追加）
  - `controller/`（FastAPI ルータや MCP ツール公開）
  - `presenter/`（レスポンス組み立て/整形）

既存 README の起動例: `uv run uvicorn gbizinfo_mcp.mcp_server:app --reload` に合わせてファイルを配置。

## 設定/セキュリティ

- `.env` の `GBIZINFO_API_TOKEN` を必須。コード/ログで露出しないこと
- 認証ヘッダ名は仕様の表記に厳密一致: `X-hojinInfo-api-token`
- ログはトークンを必ずマスク（`<redacted>`）
- PII をログに残さない。エラーは「入力/ドメイン/通信/予期せぬ」に分類

### `config.py`（例の方針）

- `os.environ` または `pydantic-settings` で環境変数を読み取り、必須チェック
- タイムアウト/リトライ回数/ユーザーエージェント/ベース URL をここで集中管理

## HTTP 基盤（`services/http.py`）

- `requests.Session` + `urllib3.Retry` で指数バックオフ（5xx/一時的失敗をリトライ）
- デフォルトヘッダ:
  - `Content-Type: application/json`
  - `Accept: application/json`
  - `User-Agent: gbixnfo-mcp/0.1 (+https://info.gbiz.go.jp/)`
  - `X-hojinInfo-api-token: <configから>`
- タイムアウトは全リクエストで必須指定（例: 接続3s/読み込み10s）
- レスポンスが JSON の場合のみ `json.loads`、非 JSON は生テキスト返却
- 失敗時はステータス/メッセージを含む例外（通信/サーバ/クライアント）を送出

## 型安全ポリシー

- すべての公開関数に型注釈を付与。`Any` は極力禁止
- 外部 API の応答はまず `TypedDict` or `pydantic` DTO にバインドし、次にドメインモデルへ変換
- Pydantic v2 の `model_validate`/`field_validator` でスキーマ検証（未知フィールドは `ignore` か `forbid` を明示）
- 変換層（adapter）で命名/単位/日付型（`datetime.date` など）を正規化

## サービス層（`services/gbizinfo_service.py`）

- 役割: エンドポイントごとのユースケースを実装
- 代表シグネチャ例:
  - `get_basic_info(corporate_number: str) -> Company`
  - `get_certification(corporate_number: str) -> CertificationInfo`
  - `search(**query: CompanySearchQuery) -> Paginated[Company]`
- 入力検証（桁数/文字種など）はサービス前段で実施

## アダプタ層（`services/adapters/gbizinfo_adapter.py`）

- 役割: 外部 JSON → DTO → ドメインモデル
- ドメインモデルとは分離。API変更の影響を局所化
- 公式のフィールド名に追従しつつ、日本語キー/ネストの揺れに備えて防衛的に実装

## モデル層（`model/`）

- Pydantic BaseModel を使用（`ConfigDict` で `from_attributes=True`, `extra='ignore|forbid'` を明示）
- 代表モデル: `Company`, `Pagination`
- 計算/派生プロパティはモデルメソッドとして実装

## コントローラ/プレゼンター

- FastAPI ルータまたは fastapi-mcp のツール公開でサービス層を呼び出し
- プレゼンターで API/UI 応答形に整形し、機密情報を排除

## 非 OpenAPI ジェネレータ方針

- 自前の `requests` 実装＋ Pydantic モデルで運用
- `.cursor/rules/openapi-client.mdc` のクライアント生成手順は Python では適用しない。
  - 例外: 将来の自動検証目的のみに生成する場合も、実行系では使用しない

## 例外/エラーハンドリング

- 4xx: 入力またはドメインエラーとして扱い要約のみ返す
- 5xx/タイムアウト: リトライ適用後に失敗した場合は通信エラーとして通知
- 監査ログには ID/要約/HTTP ステータスのみ（詳細/PII は含めない）

## 開発チェックリスト

- 型: すべての公開 API に型注釈。DTO/モデルは Pydantic で検証
- セキュリティ: トークンをヘッダ自動付与・ログでマスク
- HTTP: タイムアウト/リトライ/ユーザーエージェント/JSON 処理を統一
- 層: service/adapter/model/controller/presenter の責務分離
- テスト: 主要ユースケースのユニットテスト（HTTP はモック）
