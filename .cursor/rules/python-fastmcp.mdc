---
description: Python MCP 実装を fastmcp で行うための方針と実装ガイド（fastapi-mcp からの移行含む）
globs: python/**/*.py
---
# Python MCP 実装ガイド（fastmcp 採用）

本プロジェクトの Python 側 MCP 実装は、冗長性回避と開発効率のため `fastmcp` を採用します。既存の `fastapi-mcp` による MCP 公開は廃止し、HTTP API（FastAPI）は維持しつつ、MCP は `fastmcp` ベースの独立エントリで提供します。

参照: `https://gofastmcp.com/getting-started/welcome`

## 目的と範囲

- 対象: Python MCP サーバのエントリ・ツール定義・入出力スキーマ・命名規約
- 非対象: 外部APIコール/DTO/ドメイン変換は既存 Service/Model を再利用（HTTP・型方針は従来どおり）

## 依存・設定

- 依存: `fastmcp` を `python/pyproject.toml` に追加
- 環境変数: `.env` の `GBIZINFO_API_TOKEN` を利用（JS 実装と同一）
- 認証ヘッダ: `X-hojinInfo-api-token`（厳密一致）
- 既存の HTTP/Service を再利用: [`python/src/gbizinfo_mcp/services/gbizinfo_service.py`](mdc:python/src/gbizinfo_mcp/services/gbizinfo_service.py)

## エントリ構成（推奨）

- HTTP アプリ（FastAPI）は現状維持: [`python/src/gbizinfo_mcp/app.py`](mdc:python/src/gbizinfo_mcp/app.py)
- MCP エントリ（fastmcp 用）を新設: 例）`python/src/gbizinfo_mcp/mcp_fastmcp.py`
  - `fastmcp` サーバ生成
  - ツール登録（下記命名・説明・スキーマ準拠）
  - 既存 Service を呼び、結果を JSON 出力（必要に応じて Presenter 整形）

## ツール命名・説明（JS 実装と厳密一致）

- サーバ名: `gbizinfo-mcp`
- ツール名（operation_id と同一）
  - `search`: gBizINFO を複合条件で検索します（Swaggerの検索クエリを個別パラメータで受け付け）。
  - `get_basic_info`: 法人番号で基本情報を取得します。
  - `get_certification`: 法人番号で届出・認定情報を取得します。
  - `get_commendation`: 法人番号で表彰情報を取得します。
  - `get_finance`: 法人番号で財務情報を取得します。
  - `get_patent`: 法人番号で特許情報を取得します。
  - `get_procurement`: 法人番号で調達情報を取得します。
  - `get_subsidy`: 法人番号で補助金情報を取得します。
  - `get_workplace`: 法人番号で職場情報を取得します。

## 入力スキーマ（要点）

- `search`:
  - 主要クエリは OpenAPI に準拠（例: `name`, `corporateNumber`, `corporateType`, `existFlg`, `prefecture`, `city`, `address`, `industry`, `businessItem`, `foundedYear`, `salesArea`, `unifiedQualification`, `unifiedQualificationSub01..04`, 数値レンジ, `establishmentFrom/To`, `from`, `size` など）
  - Python では Pydantic 入力モデル（[`CompanySearchQuery`](mdc:python/src/gbizinfo_mcp/model/search.py)）で検証し、Service に委譲
- `get_*` 系:
  - 引数: `{ corporateNumber: string }`（13桁検証を実施）

## 出力（基本方針）

- `search`: ドメイン `Company` のページング結果（[`CompanyPage`](mdc:python/src/gbizinfo_mcp/model/company_page.py)）を JSON 返却
- `get_*`: OpenAPI に準拠した `HojinInfoResponse` を返却（[`hojin_info`](mdc:python/src/gbizinfo_mcp/model/hojin_info.py)）

## 実装ガイド（概要）

1. `fastmcp` サーバを作成し、ツールを登録
2. 各ツールで入力を Pydantic で検証（既存モデルを再利用）
3. `GBizInfoService` を呼び出し（HTTP ヘッダに `X-hojinInfo-api-token` を自動付与）
4. 結果をそのまま/または Presenter で整形して返却
5. 例外は「入力/ドメイン/通信/予期せぬ」に分類して要約返却（トークンはマスク）

## 注意・禁止事項

- `fastapi-mcp` による MCP エンドポイント公開は行わない（`fastmcp` に一本化）
- OpenAPI ジェネレータは使用しない（既存ポリシー継続）
- ツール名・説明・引数の語彙は JS 実装に厳密一致させること（相互運用のため）

## 関連

- OpenAPI スキーマ: [`openapi/gbizinfo-openapi.json`](mdc:openapi/gbizinfo-openapi.json)
- Python 型安全指針: [`python-typed-implementation.mdc`](mdc:.cursor/rules/python-typed-implementation.mdc)
- JS MCP 実装（命名・説明の正典）: [`javascript/src/mcp/server.ts`](mdc:javascript/src/mcp/server.ts)
